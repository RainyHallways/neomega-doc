import{_ as e,c as o,o as a,Q as c}from"./chunks/framework.c009d427.js";const q=JSON.parse('{"title":"Web(HTTP) 模块","description":"","frontmatter":{"contributors":["CMA2401PT","Liliya233","awaqwqa","kukinghan"]},"headers":[],"relativePath":"lua/modules/web-cn.md","filePath":"lua/modules/web-cn.md","lastUpdated":1724487756000}'),t={name:"lua/modules/web-cn.md"},d=c('<h1 id="web-http-模块" tabindex="-1">Web(HTTP) 模块 <a class="header-anchor" href="#web-http-模块" aria-label="Permalink to &quot;Web(HTTP) 模块&quot;">​</a></h1><p>此模块为 lua 环境引入了对 HTTP 请求的支持。</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>Web 模块位于 <code>omega</code> 命名空间下的 <code>web</code> 子项。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">local http=require(&quot;omega&quot;).web</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">local http=require(&quot;omega&quot;).web</span></span></code></pre></div><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><h3 id="伪定义" tabindex="-1">伪定义 <a class="header-anchor" href="#伪定义" aria-label="Permalink to &quot;伪定义&quot;">​</a></h3><p>这些定义并未被现实地实现，而是作为要求遵守的隐式约定存在。</p><h4 id="httprequest-table" tabindex="-1"><code>HTTPRequest</code> : <code>table</code> <a class="header-anchor" href="#httprequest-table" aria-label="Permalink to &quot;`HTTPRequest` : `table`&quot;">​</a></h4><p>这是向 <code>web.request</code> 传入的 <code>table</code> 值。</p><ul><li><code>method</code>: <code>string</code> [可选, 默认=&quot;GET&quot;], 有效的 HTTP 请求类型，例如 <code>POST</code>。</li><li><code>body</code>: <code>string</code> [可选], 请求体</li><li><code>headers</code>: <code>table</code> [可选], 若设定，所有的 key 需要作为字符串存在。</li></ul><h4 id="httpresponse-table" tabindex="-1"><code>HTTPResponse</code> : <code>table</code> <a class="header-anchor" href="#httpresponse-table" aria-label="Permalink to &quot;`HTTPResponse` : `table`&quot;">​</a></h4><p>这是 HTTP 方法们返回的 <code>table</code> 值。</p><ul><li><code>status</code>: <code>number</code></li><li><code>headers</code>: <code>table</code></li><li><code>body</code>: <code>string</code></li></ul><h3 id="client-http-客户端" tabindex="-1"><code>client</code>: HTTP 客户端 <a class="header-anchor" href="#client-http-客户端" aria-label="Permalink to &quot;`client`: HTTP 客户端&quot;">​</a></h3><p>客户端可以通过调用 <code>web.new</code> 或 <code>client</code> 对象的 <code>client.new</code> 方法实现，不管创建方式如何，空的 HTTP 客户端都会被创建。 此模块，<code>web</code> 是一个默认的 <code>client</code> 对象，用于简化 headers 不重要的 HTTP 请求。</p><h4 id="client-get" tabindex="-1"><code>client.get</code> <a class="header-anchor" href="#client-get" aria-label="Permalink to &quot;`client.get`&quot;">​</a></h4><p>参数:</p><ul><li><code>url</code>: <code>string</code> 返回:</li><li><code>response</code>: <code>HTTPResponse</code></li><li><code>error</code> [可选]: <code>string</code></li></ul><h4 id="client-post" tabindex="-1"><code>client.post</code> <a class="header-anchor" href="#client-post" aria-label="Permalink to &quot;`client.post`&quot;">​</a></h4><p>参数:</p><ul><li><code>url</code>: <code>string</code></li><li><code>content_type</code>: <code>string</code></li><li><code>body</code>: <code>string</code> 返回:</li><li><code>response</code>: <code>HTTPResponse</code></li><li><code>error</code> [可选]: <code>string</code></li></ul><h4 id="client-request" tabindex="-1"><code>client.request</code> <a class="header-anchor" href="#client-request" aria-label="Permalink to &quot;`client.request`&quot;">​</a></h4><p>参数:</p><ul><li><code>request</code>: <code>HTTPRequest</code> 返回:</li><li><code>response</code>: <code>HTTPResponse</code></li><li><code>error</code> [可选]: <code>string</code></li></ul><h4 id="client-headers" tabindex="-1"><code>client.headers</code> <a class="header-anchor" href="#client-headers" aria-label="Permalink to &quot;`client.headers`&quot;">​</a></h4><p>此项目存储对此客户端所发送的全部请求适用的 headers 值。此项目可以变更。</p><p>可能的用法:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">local headers={Authorization=&quot;Bearer Hello&quot;}</span></span>\n<span class="line"><span style="color:#e1e4e8;">client.headers=headers</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">local headers={Authorization=&quot;Bearer Hello&quot;}</span></span>\n<span class="line"><span style="color:#24292e;">client.headers=headers</span></span></code></pre></div>',29),l=[d];function s(i,n,r,p,h,u){return a(),o("div",null,l)}const T=e(t,[["render",s]]);export{q as __pageData,T as default};
