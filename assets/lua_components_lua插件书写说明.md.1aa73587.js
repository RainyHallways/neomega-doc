import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.c009d427.js";const q=JSON.parse('{"title":"[WIP] lua 插件书写说明(均以pc端为列子)","description":"","frontmatter":{"contributors":["CMA2401PT","Liliya233","awaqwqa","kukinghan"]},"headers":[],"relativePath":"lua/components/lua插件书写说明.md","filePath":"lua/components/lua插件书写说明.md","lastUpdated":1724487756000}'),o={name:"lua/components/lua插件书写说明.md"},p=l(`<h1 id="wip-lua-插件书写说明-均以pc端为列子" tabindex="-1">[WIP] lua 插件书写说明(均以pc端为列子) <a class="header-anchor" href="#wip-lua-插件书写说明-均以pc端为列子" aria-label="Permalink to &quot;[WIP] lua 插件书写说明(均以pc端为列子)&quot;">​</a></h1><blockquote><p>前情提要 如果你想要书写或者修改 <code>lua组件</code> 你需要具备 lua语言 的基础语法知识<br> 但是不用担心 lua 的语法和 python 一样简单<br> 这里是学习网站: <a href="https://www.runoob.com/lua/lua-tutoria.html" target="_blank" rel="noreferrer">Lua 教程 | 菜鸟教程 (runoob.com)</a><br> 只要你认真学习 只需要花费 2-3 个小时就能使用一些基础语法</p></blockquote><h2 id="_1-启动-格式" tabindex="-1">1.启动 格式 : <a class="header-anchor" href="#_1-启动-格式" aria-label="Permalink to &quot;1.启动 格式 :&quot;">​</a></h2><ul><li><p>首先是文件方面 一般来说一个lua插件至少需要具备 <code>两个文件</code></p><h3 id="_1-在-neomega-config-lualoader-xxxx-xxx-json-的配置文件" tabindex="-1">1. 在 <code>./neomega/config/LuaLoader/xxxx/xxx.json</code> 的配置文件 <a class="header-anchor" href="#_1-在-neomega-config-lualoader-xxxx-xxx-json-的配置文件" aria-label="Permalink to &quot;1. 在 \`./neomega/config/LuaLoader/xxxx/xxx.json\` 的配置文件&quot;">​</a></h3><p><code>xxxx</code> 是指的插件名字而 <code>xxx</code> 指的是数字<br> 其内容为一般为:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;名称&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;example2.lua&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;配置&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;Author&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2401PT&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;Index&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;key3&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;value3&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;描述&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;这是一个示例lua插件&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;是否禁用&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;来源&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;LuaLoader&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;名称&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;example2.lua&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;配置&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;Author&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2401PT&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;Index&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;key3&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;value3&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;描述&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;这是一个示例lua插件&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;是否禁用&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;来源&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;LuaLoader&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul><p>也就是: <code>./neomega/lang/LuaLoader</code> 下面的lua代码文件的名字</p><p>然后是 <code>&lt;远程地址&gt;</code> 和 <code>&lt;远程哈希地址&gt;</code> 当你希望你的插件保持更新 并且在你的掌控中的时候 请将你存放代码的网址地址写入 <code>&lt;远程地址&gt;</code> 那么在每次启动这个插件的时候都去去保证更新 不用多说, <code>&lt;配置&gt;</code> 就是你的插件需要的配置文件</p><h3 id="_2-接下来就是上文中提及的-neomega-lang-lualoader-下面的-lua代码文件" tabindex="-1">2. 接下来就是上文中提及的 <code>./neomega/lang/LuaLoader</code> 下面的 <code>lua代码文件</code> <a class="header-anchor" href="#_2-接下来就是上文中提及的-neomega-lang-lualoader-下面的-lua代码文件" aria-label="Permalink to &quot;2. 接下来就是上文中提及的 \`./neomega/lang/LuaLoader\` 下面的 \`lua代码文件\`&quot;">​</a></h3><p>这里集群了 <code>非云端lua代码</code> 的实现<br> 也就是你需要将你 <code>插件逻辑</code> 写入的地方</p><h2 id="_2-如何写一个插件" tabindex="-1">2.如何写一个插件？ <a class="header-anchor" href="#_2-如何写一个插件" aria-label="Permalink to &quot;2.如何写一个插件？&quot;">​</a></h2><ol><li>废话不多说我们直接上 hello world 来剖析一个插件应该至少具备哪些东西</li></ol><p>这里是一个名为 <code>hello_world.lua</code> 的插件逻辑</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">//</span><span style="color:#E1E4E8;">获取omega的内置模块</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> omega </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;omega&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">//</span><span style="color:#E1E4E8;">获得 可以向聊天框里面打印消息的函数</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> print </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">print</span></span>
<span class="line"><span style="color:#F97583;">//</span><span style="color:#E1E4E8;">向所有人发送一条hello world</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world!&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">//</span><span style="color:#24292E;">获取omega的内置模块</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> omega </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;omega&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">//</span><span style="color:#24292E;">获得 可以向聊天框里面打印消息的函数</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> print </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">print</span></span>
<span class="line"><span style="color:#D73A49;">//</span><span style="color:#24292E;">向所有人发送一条hello world</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world!&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>对一个输出 <code>hello world!</code> 的插件而言你只需要写简短的三行代码<br> 我们剖析一下这几行代码</p><ul><li><p><strong>第1行</strong>: 这里运用了 <code>lua代码</code> 中的 <code>require函数</code> 这个函数获取了 <code>omega模块</code> 那么下文中出现的所有 <code>omega</code> 都代表着 <code>omega模块</code><br> 而这里的 <code>omega</code> 即是最核心的部分 几乎 <code>插件与mc的所有的交互</code> 都需要它来实现<br></p><blockquote><p>Tips: omega模块里面包含了全面且稳定的api</p></blockquote></li><li><p><strong>第2行</strong>: 与游戏的交互函数: <code>print()</code> 请注意这里的 <code>print()</code> 并不是lua语言中 <code>传统的print()</code><br> 这里的 <code>print()</code> 完成的功能是 <code>将print()函数里面的参数发送到游戏中去</code><br> 也就是说第三行中 <code>print(&quot;hello world!&quot;)</code> 函数执行后 <code>游戏中的聊天框</code> 中就会出现&quot;hello world!&quot;这一文字</p></li></ul><h2 id="_3-neomega-核心篇章poller-不用怕" tabindex="-1">3.neomega 核心篇章Poller (不用怕) <a class="header-anchor" href="#_3-neomega-核心篇章poller-不用怕" aria-label="Permalink to &quot;3.neomega 核心篇章Poller (不用怕)&quot;">​</a></h2><blockquote><p><code>Poller</code> 我们就需要长篇大论一下了 因为写插件是一份充满爱意的事情 需要开发者本身在遵循微量的规范情况下让脑海中那些奇思妙想爆发出来 将你的思绪作为 <code>neomega</code> 社区中一份必不可少的支柱 当然我会尽量让枯燥的知识点有趣起来</p></blockquote><h3 id="一-poller" tabindex="-1">一. poller !!!!! <a class="header-anchor" href="#一-poller" aria-label="Permalink to &quot;一. poller !!!!!&quot;">​</a></h3><blockquote><p>这就是进阶核心的内容 这也是插件中你始终需要关注的东西 毫不夸张地说我们的 <code>lua插件</code> 是面向 <code>poller</code> 开发的</p></blockquote><h5 id="我们开始解释何为-poller" tabindex="-1">我们开始解释何为 <code>poller</code> <a class="header-anchor" href="#我们开始解释何为-poller" aria-label="Permalink to &quot;我们开始解释何为 \`poller\`&quot;">​</a></h5><blockquote><p>为了充分理解这个东西 我们不妨设想一种情况 :如果你在一个插件中使用了一个堵塞的函数 类似于python中的 <code>input</code>，当用户输入之前 <code>input</code> 函数会将整个程序停住等待</p></blockquote><p>那么如果我们在书写插件的时候写调用 <strong>接受玩家的说话信息这个函数</strong> 当我们等待a玩家说话的时候 b玩家也想使用这个插件 会发生什么？ 没错！！<strong>b玩家只能乖乖等着a玩家说话</strong> 然后插件完成工作才能开始处理b玩家的事情</p><ul><li>如何解决这个问题？<strong>poller</strong>便诞生了<br> 你可以比作它是一个指挥中心 比如你同时写了两份不同的事件函数 然后交到 <code>poller</code> 手中 <code>poller</code> 就会同时等待这两份函数的响应！那么无论是<code>a</code>还是<code>b</code>都不会因为对方的正在使用而导致自己无法使用</li></ul><h3 id="二-在代码中如何使用-poller" tabindex="-1">二.在代码中如何使用 <code>poller</code>? <a class="header-anchor" href="#二-在代码中如何使用-poller" aria-label="Permalink to &quot;二.在代码中如何使用 \`poller\`?&quot;">​</a></h3><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> omega </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;omega&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> print </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">print</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> block_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">block_input</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请随便输入点什么&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> something </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">block_input</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&quot;你刚才输入了 %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(something))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">--  现在的问题是，假如我们希望设置一个超时，比如说，如果用户在3秒内没有输入，那么就默认输入了&quot;nothing&quot;。</span></span>
<span class="line"><span style="color:#6A737D;">-- 我们知道，我们可以使用sleep函数来等待一段时间，但是我们不知道怎么在等待的同时，又能够接收用户的输入。</span></span>
<span class="line"><span style="color:#6A737D;">-- 因为，如果我们先使用sleep函数，那么在等待的时候，我们就无法接收用户的输入了。</span></span>
<span class="line"><span style="color:#6A737D;">-- 或者，我们可以先接收用户的输入，但是在等待的时候，我们就无法接收用户的输入了。</span></span>
<span class="line"><span style="color:#6A737D;">-- 就像这样：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">omega.</span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">block_sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;3s passed&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请随便输入点什么&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> something </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">block_input</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&quot;你刚才输入了 %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(something))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 这是因为，这两个函数是阻塞的，也就是说，当我们调用这两个函数的时候，程序会停下来，等待这两个函数返回。</span></span>
<span class="line"><span style="color:#6A737D;">-- 在lua支持中，阻塞函数都被命名为 block_xxx，比如block_sleep，block_input</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 回到我们的问题，我们希望在等待的时候，又能够接收用户的输入，该怎么做呢？</span></span>
<span class="line"><span style="color:#6A737D;">-- 我们可以使用 mux_poller 来实现这个功能</span></span>
<span class="line"><span style="color:#6A737D;">-- mux_poller 是一个多路复用器，它可以同时监听阻塞多个事件，当其中一个事件发生的时候，它就会返回这个事件。</span></span>
<span class="line"><span style="color:#6A737D;">-- 创建一个 mux_poller 的方法是 omega.listen.new_mux_poller()</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> mux_poller </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">new_mux_poller</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">-- 然后，我们可以使用它来监听阻塞事件，比如说，我们可以监听阻塞输入事件 block_input</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">poll</span><span style="color:#E1E4E8;">(block_input):</span><span style="color:#79B8FF;">poll</span><span style="color:#E1E4E8;">(omega.</span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">block_sleep</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">block_get_next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">-- 上面这句代码等效于下面这些代码</span></span>
<span class="line"><span style="color:#6A737D;">-- mux_poller:poll(block_input) -- 监听阻塞输入事件</span></span>
<span class="line"><span style="color:#6A737D;">-- mux_poller:poll(omega.system.block_sleep, 3.0) -- 监听阻塞3秒事件</span></span>
<span class="line"><span style="color:#6A737D;">-- local event = mux_poller:block_get_next() -- 等待第一件发生的事情，然后返回这件事情</span></span>
<span class="line"><span style="color:#6A737D;">-- 如果我们监听的事件都没有发生，那么这个函数就会一直等待下去，直到有一个事件发生。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请随便输入点什么&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> block_input </span><span style="color:#F97583;">then</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">-- 如果是阻塞输入事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&quot;你输入了: %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">elseif</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">block_sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">then</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">-- 如果是阻塞3秒事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你没有输入&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">stop</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">-- 需要注意的时，因为我们只取了一个事件，所以我们调用 stop 表示剩下的事件都不要了。如果不这么干，这个程序就永远不会结束</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 我们将上面的代码封装成一个函数，这样就可以在任何地方使用了</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_input_with_timeout</span><span style="color:#E1E4E8;">(time_out)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> mux_poller </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">new_mux_poller</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">poll</span><span style="color:#E1E4E8;">(block_input):</span><span style="color:#79B8FF;">poll</span><span style="color:#E1E4E8;">(omega.</span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">block_sleep</span><span style="color:#E1E4E8;">, time_out):</span><span style="color:#79B8FF;">block_get_next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">stop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> block_input </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">elseif</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">block_sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请随便输入点什么&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&quot;你刚才输入了 %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">get_input_with_timeout</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3.0</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 相比 sleep, 还有一个更好的方法， 就是使用 event_after, 相比 sleep, event_after 可以携带一个参数描述事件的类型</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> mux_poller </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">new_mux_poller</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">poll</span><span style="color:#E1E4E8;">(block_input):</span><span style="color:#79B8FF;">event_after</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">, { reason </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;timeout&quot; </span><span style="color:#E1E4E8;">}):</span><span style="color:#79B8FF;">block_get_next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">-- 或者这样写， 上下两种写法等价，但是下面写法风格更统一</span></span>
<span class="line"><span style="color:#6A737D;">-- local event = mux_poller:poll(block_input):poll(mux_poller.event_after, 0.5, { reason = &quot;timeout&quot; }):block_get_next()</span></span>
<span class="line"><span style="color:#6A737D;">-- 或者这样写，event_after 携带的参数可以是任何类型，不一定是 table ()</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">poll</span><span style="color:#E1E4E8;">(block_input):</span><span style="color:#79B8FF;">poll</span><span style="color:#E1E4E8;">(mux_poller.</span><span style="color:#B392F0;">event_after</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;timeout&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">block_get_next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> block_input </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&quot;你输入了: %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">elseif</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> mux_poller.</span><span style="color:#B392F0;">event_after</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&quot;你没有输入: %s %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">, event.</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">reason</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">stop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 现在， 你可以把 mux_poller:stop() 注释掉，然后看看会发生什么。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> omega </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;omega&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> print </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">print</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> block_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">block_input</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请随便输入点什么&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> something </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">block_input</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&quot;你刚才输入了 %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(something))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">--  现在的问题是，假如我们希望设置一个超时，比如说，如果用户在3秒内没有输入，那么就默认输入了&quot;nothing&quot;。</span></span>
<span class="line"><span style="color:#6A737D;">-- 我们知道，我们可以使用sleep函数来等待一段时间，但是我们不知道怎么在等待的同时，又能够接收用户的输入。</span></span>
<span class="line"><span style="color:#6A737D;">-- 因为，如果我们先使用sleep函数，那么在等待的时候，我们就无法接收用户的输入了。</span></span>
<span class="line"><span style="color:#6A737D;">-- 或者，我们可以先接收用户的输入，但是在等待的时候，我们就无法接收用户的输入了。</span></span>
<span class="line"><span style="color:#6A737D;">-- 就像这样：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">omega.</span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">block_sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3s passed&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请随便输入点什么&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> something </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">block_input</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&quot;你刚才输入了 %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(something))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 这是因为，这两个函数是阻塞的，也就是说，当我们调用这两个函数的时候，程序会停下来，等待这两个函数返回。</span></span>
<span class="line"><span style="color:#6A737D;">-- 在lua支持中，阻塞函数都被命名为 block_xxx，比如block_sleep，block_input</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 回到我们的问题，我们希望在等待的时候，又能够接收用户的输入，该怎么做呢？</span></span>
<span class="line"><span style="color:#6A737D;">-- 我们可以使用 mux_poller 来实现这个功能</span></span>
<span class="line"><span style="color:#6A737D;">-- mux_poller 是一个多路复用器，它可以同时监听阻塞多个事件，当其中一个事件发生的时候，它就会返回这个事件。</span></span>
<span class="line"><span style="color:#6A737D;">-- 创建一个 mux_poller 的方法是 omega.listen.new_mux_poller()</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> mux_poller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">new_mux_poller</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">-- 然后，我们可以使用它来监听阻塞事件，比如说，我们可以监听阻塞输入事件 block_input</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">poll</span><span style="color:#24292E;">(block_input):</span><span style="color:#005CC5;">poll</span><span style="color:#24292E;">(omega.</span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">block_sleep</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">block_get_next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">-- 上面这句代码等效于下面这些代码</span></span>
<span class="line"><span style="color:#6A737D;">-- mux_poller:poll(block_input) -- 监听阻塞输入事件</span></span>
<span class="line"><span style="color:#6A737D;">-- mux_poller:poll(omega.system.block_sleep, 3.0) -- 监听阻塞3秒事件</span></span>
<span class="line"><span style="color:#6A737D;">-- local event = mux_poller:block_get_next() -- 等待第一件发生的事情，然后返回这件事情</span></span>
<span class="line"><span style="color:#6A737D;">-- 如果我们监听的事件都没有发生，那么这个函数就会一直等待下去，直到有一个事件发生。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请随便输入点什么&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> block_input </span><span style="color:#D73A49;">then</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">-- 如果是阻塞输入事件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&quot;你输入了: %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">elseif</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">block_sleep</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">then</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">-- 如果是阻塞3秒事件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你没有输入&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">stop</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">-- 需要注意的时，因为我们只取了一个事件，所以我们调用 stop 表示剩下的事件都不要了。如果不这么干，这个程序就永远不会结束</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 我们将上面的代码封装成一个函数，这样就可以在任何地方使用了</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_input_with_timeout</span><span style="color:#24292E;">(time_out)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">local</span><span style="color:#24292E;"> mux_poller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">new_mux_poller</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">local</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">poll</span><span style="color:#24292E;">(block_input):</span><span style="color:#005CC5;">poll</span><span style="color:#24292E;">(omega.</span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">block_sleep</span><span style="color:#24292E;">, time_out):</span><span style="color:#005CC5;">block_get_next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">stop</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> block_input </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">data</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">elseif</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">block_sleep</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请随便输入点什么&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&quot;你刚才输入了 %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">get_input_with_timeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3.0</span><span style="color:#24292E;">)))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 相比 sleep, 还有一个更好的方法， 就是使用 event_after, 相比 sleep, event_after 可以携带一个参数描述事件的类型</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> mux_poller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">new_mux_poller</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">poll</span><span style="color:#24292E;">(block_input):</span><span style="color:#005CC5;">event_after</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, { reason </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;timeout&quot; </span><span style="color:#24292E;">}):</span><span style="color:#005CC5;">block_get_next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">-- 或者这样写， 上下两种写法等价，但是下面写法风格更统一</span></span>
<span class="line"><span style="color:#6A737D;">-- local event = mux_poller:poll(block_input):poll(mux_poller.event_after, 0.5, { reason = &quot;timeout&quot; }):block_get_next()</span></span>
<span class="line"><span style="color:#6A737D;">-- 或者这样写，event_after 携带的参数可以是任何类型，不一定是 table ()</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">poll</span><span style="color:#24292E;">(block_input):</span><span style="color:#005CC5;">poll</span><span style="color:#24292E;">(mux_poller.</span><span style="color:#6F42C1;">event_after</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;timeout&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">block_get_next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> block_input </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&quot;你输入了: %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">elseif</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> mux_poller.</span><span style="color:#6F42C1;">event_after</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&quot;你没有输入: %s %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">, event.</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">reason</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">stop</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">-- 现在， 你可以把 mux_poller:stop() 注释掉，然后看看会发生什么。</span></span></code></pre></div><p>简单来说就是 <code>oemga.listen.new_mux_poller()</code> 获得的 <code>mux_poller</code>【<em>只是一个变量名不需要纠结</em>】是总指挥中心 而你通过其他函数列如 <code>oemga.system.block_input()</code> 的子 <code>poller</code> 放入 <code>mux_poller:poll()</code> 中也就是: <code>mux_poller(poller)</code></p><p>然后调用 <code>mux_poller:block_hash_next()</code> 函数就会开始堵塞 一直到 <code>子poller</code> 中任意一个事件响应,然后你就可以调用 <code>mux_poller:block_get_next()</code> 获取响应的事件 进行处理</p><p>至此进阶中最核心的部分 <code>poller基础用法</code> 已经介绍完毕了</p><h2 id="_4-规范的插件书写的一些建议" tabindex="-1">4.规范的插件书写的一些建议 <a class="header-anchor" href="#_4-规范的插件书写的一些建议" aria-label="Permalink to &quot;4.规范的插件书写的一些建议&quot;">​</a></h2><blockquote><p>需要注意的是: 如果当你看完上面的代码就开始信心满满得去根据列子插件去书写你的插件,很有可能你会遇到各种各样的问题.那么为了避免这些问题,我们可以严格围绕 <code>poller</code> 来实现插件功能. <strong>不要脱离poller.</strong> 比如下面的一个插件列子</p></blockquote><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> omega </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;omega&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> print </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">print</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> cmds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">cmds</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> cmds_resp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cmds.</span><span style="color:#B392F0;">resp</span></span>
<span class="line"><span style="color:#6A737D;">--这里需要详细解释一下子</span></span>
<span class="line"><span style="color:#6A737D;">--首先是每一个需要堵塞的module几乎都需要实现poller</span></span>
<span class="line"><span style="color:#6A737D;">--来实现多个堵塞事件的监听</span></span>
<span class="line"><span style="color:#6A737D;">--何为堵塞？ 比如当你想要监听 玩家说话的时候 伪代码:getPlayerMsg()那么在玩家正式说话之前</span></span>
<span class="line"><span style="color:#6A737D;">--是不是整体代码就卡在了getPlayerMsg() 如果你有python基础那么 这个道理就是input()的等待玩家输入</span></span>
<span class="line"><span style="color:#6A737D;">--由于lua的多线程是不安全的 那么在玩家正式说话之前 整个插件都会被卡住 无法同时为多个玩家服务</span></span>
<span class="line"><span style="color:#6A737D;">--于是我们仿造了poller来实现这一问题</span></span>
<span class="line"><span style="color:#6A737D;">--每个实现了poller的module都是实现了get_source接口的模块 都可以放入mux_poller中poll</span></span>
<span class="line"><span style="color:#6A737D;">--接受等待 那么 在下方代码就是 注册一个又一个新的poller 然后让如cbs这个字典中 并且存入对应的处理方法</span></span>
<span class="line"><span style="color:#6A737D;">--然后再根据这个cbs一个一个poll注册</span></span>
<span class="line"><span style="color:#6A737D;">--一同加入堵塞等待 当事件发生时且不为nil的时候 就会获取data然后放入对应的处理函数</span></span>
<span class="line"><span style="color:#6A737D;">--如果你具备一定的代码水平 想必就明白了 这类似于回调函数</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello, world! from example1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> mux_poller </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">new_mux_poller</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> cbs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> echo_poller </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">menu</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">add_backend_menu_entry</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    triggers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;echo&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;repeat&quot; </span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    argument_hint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[msg]&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    usage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;在终端上打印[msg]&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">cbs[echo_poller] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(terminal_cmds)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&quot;echo: %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">table.concat</span><span style="color:#E1E4E8;">(terminal_cmds, </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> hello_poller </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">menu</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">add_backend_menu_entry</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    triggers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Hello&quot; </span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    argument_hint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[msg]&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    usage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;在终端上打印 hi [msg]&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">cbs[hello_poller] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(terminal_cmds)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&quot;hi: %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">table.concat</span><span style="color:#E1E4E8;">(terminal_cmds, </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> game_hello_poller </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">menu</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">add_game_menu_entry</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    triggers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Hello&quot; </span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    argument_hint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[msg]&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    usage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;在游戏里显示 hi [msg]&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">talk_to</span><span style="color:#E1E4E8;">(player, msg)</span></span>
<span class="line"><span style="color:#E1E4E8;">    cmds.</span><span style="color:#79B8FF;">send_wo_cmd</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&quot;tellraw %s {</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">rawtext</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:[{</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">text</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">%s</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">}]}&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(player, msg))</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">cbs[game_hello_poller] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(chat)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">-- chat={name=&quot;...&quot;,msg={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;},type=...,raw_msg=...,raw_name=...,raw_parameters={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;}}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">talk_to</span><span style="color:#E1E4E8;">(chat.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">, (</span><span style="color:#9ECBFF;">&quot;hi: %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">table.concat</span><span style="color:#E1E4E8;">(chat.</span><span style="color:#B392F0;">msg</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> game_echo_poller </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">menu</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">add_game_menu_entry</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    triggers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;echo&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Echo&quot; </span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    argument_hint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[msg]&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    usage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;在游戏里显示 [msg]&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">cbs[game_echo_poller] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(chat)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">-- chat={name=&quot;...&quot;,msg={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;},type=...,raw_msg=...,raw_name=...,raw_parameters={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;}}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">talk_to</span><span style="color:#E1E4E8;">(chat.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">, (</span><span style="color:#9ECBFF;">&quot;%s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">table.concat</span><span style="color:#E1E4E8;">(chat.</span><span style="color:#B392F0;">msg</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> game_rebirth_poller </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">menu</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">add_game_menu_entry</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    triggers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;重生&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;自刎&quot; </span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    argument_hint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    usage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;返回重生点&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">cbs[game_rebirth_poller] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(chat)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">-- chat={name=&quot;...&quot;,msg={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;},type=...,raw_msg=...,raw_name=...,raw_parameters={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;}}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">talk_to</span><span style="color:#E1E4E8;">(chat.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">, (</span><span style="color:#9ECBFF;">&quot;重生: %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">table.concat</span><span style="color:#E1E4E8;">(chat.</span><span style="color:#B392F0;">msg</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> game_rebirth_poller </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">menu</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">add_game_menu_entry</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    triggers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;回城&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;回主城&quot; </span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    argument_hint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    usage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;返回主城&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">cbs[game_rebirth_poller] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(chat)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">-- chat={name=&quot;...&quot;,msg={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;},type=...,raw_msg=...,raw_name=...,raw_parameters={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;}}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">talk_to</span><span style="color:#E1E4E8;">(chat.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">, (</span><span style="color:#9ECBFF;">&quot;回主城: %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">table.concat</span><span style="color:#E1E4E8;">(chat.</span><span style="color:#B392F0;">msg</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> game_mode_poller </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">menu</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">add_game_menu_entry</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    triggers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;mode&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;切换模式&quot; </span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    argument_hint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[mode]&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    usage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;切换模式&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">cbs[game_mode_poller] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(chat)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">-- chat={name=&quot;...&quot;,msg={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;},type=...,raw_msg=...,raw_name=...,raw_parameters={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;}}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">talk_to</span><span style="color:#E1E4E8;">(chat.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">, (</span><span style="color:#9ECBFF;">&quot;模式: %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">table.concat</span><span style="color:#E1E4E8;">(chat.</span><span style="color:#B392F0;">msg</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">cbs[cmds.</span><span style="color:#B392F0;">resp</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(combined_output_and_cb)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> resp_packet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> combined_output_and_cb.</span><span style="color:#B392F0;">output</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> cb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> combined_output_and_cb.</span><span style="color:#B392F0;">cb</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pairs</span><span style="color:#E1E4E8;">(cbs) </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">poll</span><span style="color:#E1E4E8;">(k)</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">block_has_next</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">-- 如果有下一个事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">block_get_next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> cbs[event.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">~=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">        cbs[event.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">](event.</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#F97583;">end</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> omega </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;omega&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> print </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">print</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> cmds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">cmds</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> cmds_resp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cmds.</span><span style="color:#6F42C1;">resp</span></span>
<span class="line"><span style="color:#6A737D;">--这里需要详细解释一下子</span></span>
<span class="line"><span style="color:#6A737D;">--首先是每一个需要堵塞的module几乎都需要实现poller</span></span>
<span class="line"><span style="color:#6A737D;">--来实现多个堵塞事件的监听</span></span>
<span class="line"><span style="color:#6A737D;">--何为堵塞？ 比如当你想要监听 玩家说话的时候 伪代码:getPlayerMsg()那么在玩家正式说话之前</span></span>
<span class="line"><span style="color:#6A737D;">--是不是整体代码就卡在了getPlayerMsg() 如果你有python基础那么 这个道理就是input()的等待玩家输入</span></span>
<span class="line"><span style="color:#6A737D;">--由于lua的多线程是不安全的 那么在玩家正式说话之前 整个插件都会被卡住 无法同时为多个玩家服务</span></span>
<span class="line"><span style="color:#6A737D;">--于是我们仿造了poller来实现这一问题</span></span>
<span class="line"><span style="color:#6A737D;">--每个实现了poller的module都是实现了get_source接口的模块 都可以放入mux_poller中poll</span></span>
<span class="line"><span style="color:#6A737D;">--接受等待 那么 在下方代码就是 注册一个又一个新的poller 然后让如cbs这个字典中 并且存入对应的处理方法</span></span>
<span class="line"><span style="color:#6A737D;">--然后再根据这个cbs一个一个poll注册</span></span>
<span class="line"><span style="color:#6A737D;">--一同加入堵塞等待 当事件发生时且不为nil的时候 就会获取data然后放入对应的处理函数</span></span>
<span class="line"><span style="color:#6A737D;">--如果你具备一定的代码水平 想必就明白了 这类似于回调函数</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, world! from example1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> mux_poller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">new_mux_poller</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> cbs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> echo_poller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">menu</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">add_backend_menu_entry</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    triggers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;echo&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;repeat&quot; </span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    argument_hint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[msg]&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    usage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;在终端上打印[msg]&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cbs[echo_poller] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(terminal_cmds)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&quot;echo: %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">table.concat</span><span style="color:#24292E;">(terminal_cmds, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> hello_poller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">menu</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">add_backend_menu_entry</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    triggers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Hello&quot; </span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    argument_hint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[msg]&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    usage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;在终端上打印 hi [msg]&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cbs[hello_poller] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(terminal_cmds)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&quot;hi: %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">table.concat</span><span style="color:#24292E;">(terminal_cmds, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> game_hello_poller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">menu</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">add_game_menu_entry</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    triggers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Hello&quot; </span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    argument_hint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[msg]&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    usage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;在游戏里显示 hi [msg]&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">talk_to</span><span style="color:#24292E;">(player, msg)</span></span>
<span class="line"><span style="color:#24292E;">    cmds.</span><span style="color:#005CC5;">send_wo_cmd</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&quot;tellraw %s {</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">rawtext</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:[{</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">text</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">%s</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">}]}&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(player, msg))</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cbs[game_hello_poller] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(chat)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">-- chat={name=&quot;...&quot;,msg={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;},type=...,raw_msg=...,raw_name=...,raw_parameters={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;}}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">talk_to</span><span style="color:#24292E;">(chat.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">, (</span><span style="color:#032F62;">&quot;hi: %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">table.concat</span><span style="color:#24292E;">(chat.</span><span style="color:#6F42C1;">msg</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> game_echo_poller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">menu</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">add_game_menu_entry</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    triggers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;echo&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Echo&quot; </span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    argument_hint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[msg]&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    usage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;在游戏里显示 [msg]&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cbs[game_echo_poller] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(chat)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">-- chat={name=&quot;...&quot;,msg={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;},type=...,raw_msg=...,raw_name=...,raw_parameters={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;}}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">talk_to</span><span style="color:#24292E;">(chat.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">, (</span><span style="color:#032F62;">&quot;%s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">table.concat</span><span style="color:#24292E;">(chat.</span><span style="color:#6F42C1;">msg</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> game_rebirth_poller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">menu</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">add_game_menu_entry</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    triggers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;重生&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;自刎&quot; </span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    argument_hint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    usage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;返回重生点&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cbs[game_rebirth_poller] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(chat)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">-- chat={name=&quot;...&quot;,msg={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;},type=...,raw_msg=...,raw_name=...,raw_parameters={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;}}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">talk_to</span><span style="color:#24292E;">(chat.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">, (</span><span style="color:#032F62;">&quot;重生: %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">table.concat</span><span style="color:#24292E;">(chat.</span><span style="color:#6F42C1;">msg</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> game_rebirth_poller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">menu</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">add_game_menu_entry</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    triggers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;回城&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;回主城&quot; </span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    argument_hint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    usage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;返回主城&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cbs[game_rebirth_poller] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(chat)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">-- chat={name=&quot;...&quot;,msg={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;},type=...,raw_msg=...,raw_name=...,raw_parameters={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;}}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">talk_to</span><span style="color:#24292E;">(chat.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">, (</span><span style="color:#032F62;">&quot;回主城: %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">table.concat</span><span style="color:#24292E;">(chat.</span><span style="color:#6F42C1;">msg</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> game_mode_poller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">menu</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">add_game_menu_entry</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    triggers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;mode&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;切换模式&quot; </span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    argument_hint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[mode]&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    usage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;切换模式&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cbs[game_mode_poller] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(chat)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">-- chat={name=&quot;...&quot;,msg={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;},type=...,raw_msg=...,raw_name=...,raw_parameters={&quot;...&quot;,&quot;...&quot;,&quot;...&quot;}}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">talk_to</span><span style="color:#24292E;">(chat.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">, (</span><span style="color:#032F62;">&quot;模式: %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">table.concat</span><span style="color:#24292E;">(chat.</span><span style="color:#6F42C1;">msg</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cbs[cmds.</span><span style="color:#6F42C1;">resp</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(combined_output_and_cb)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">local</span><span style="color:#24292E;"> resp_packet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> combined_output_and_cb.</span><span style="color:#6F42C1;">output</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">local</span><span style="color:#24292E;"> cb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> combined_output_and_cb.</span><span style="color:#6F42C1;">cb</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pairs</span><span style="color:#24292E;">(cbs) </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">poll</span><span style="color:#24292E;">(k)</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">block_has_next</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">-- 如果有下一个事件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">local</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">block_get_next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cbs[event.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">~=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">        cbs[event.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">](event.</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span></code></pre></div><p>以上的代码其实看似很多,实则只是围绕一个点来写的,事件与对应的解决方案.</p><h2 id="_5-解释事件" tabindex="-1">5. 解释事件, <a class="header-anchor" href="#_5-解释事件" aria-label="Permalink to &quot;5. 解释事件,&quot;">​</a></h2><blockquote><p>事件也就是 <code>子poller</code> ,你会发现很多函数都是返回一个子poller,比如这个echo功能</p></blockquote><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> echo_poller </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> omega.</span><span style="color:#B392F0;">menu</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">add_backend_menu_entry</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    triggers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;echo&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;repeat&quot; </span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    argument_hint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[msg]&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    usage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;在终端上打印[msg]&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">cbs[echo_poller] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(terminal_cmds)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&quot;echo: %s&quot;</span><span style="color:#E1E4E8;">):</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">table.concat</span><span style="color:#E1E4E8;">(terminal_cmds, </span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#F97583;">end</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> echo_poller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> omega.</span><span style="color:#6F42C1;">menu</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">add_backend_menu_entry</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    triggers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;echo&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;repeat&quot; </span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    argument_hint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[msg]&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    usage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;在终端上打印[msg]&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cbs[echo_poller] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(terminal_cmds)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&quot;echo: %s&quot;</span><span style="color:#24292E;">):</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">table.concat</span><span style="color:#24292E;">(terminal_cmds, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span></code></pre></div><p>这就是一个 <code>最简单的交互功能</code> 实现 （backend是后台终端的意思 也就是omg操作页面）<br> 首先 <code>cbs</code> 为一个字典负责存事件和对应的解决函数 以便于在最下方代码统一注册事件<br> 然后我们获取从 <code>omega.menu.add_backend_menu_entry</code> 这个函数中获取 <code>子poller事件</code><br></p><ul><li><p>echo_poller的解释 <code>echo_poller</code> 这个函数需要的参数是一个 <code>table</code>（{}）</p><p>这个table所需要携带的属性是 <code>triggers</code> <br> triggers 也就是触发词 比如在后台输入 <code>echo</code> 就会触发这个poller事件<br><code>argument_hint</code> 的意思是所需要携带的参数 比如echo 你好 或者先echo 然后你好<br><code>usage</code> 也就是它是用途说明</p></li><li><p>function的解释</p><p>这一团是这个事件绑定这个解决方法 然后 <code>terminal_cmds</code> 即是poller事件触发后塞入函数的 <code>回应数据</code> 在这里就是 <code>玩家输入的参数</code> 也就是 <code>argument_hint</code> 所代表的东西</p></li></ul><p>那么在书写好了这一个流程后 如何注册事件呢？</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pairs</span><span style="color:#E1E4E8;">(cbs) </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">poll</span><span style="color:#E1E4E8;">(k)</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">block_has_next</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">-- 如果有下一个事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mux_poller</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">block_get_next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> cbs[event.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">~=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">        cbs[event.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">](event.</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#F97583;">end</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pairs</span><span style="color:#24292E;">(cbs) </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">poll</span><span style="color:#24292E;">(k)</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">block_has_next</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">-- 如果有下一个事件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">local</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mux_poller</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">block_get_next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cbs[event.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">~=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">        cbs[event.</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">](event.</span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span></code></pre></div><blockquote><p>在代码中最后一堆就完成这样的功能 我们来慢慢解释</p></blockquote><p>首先依次取出 <code>cbs</code> 中的事件 然后调用 <code>mux_poller的poll方法</code> /<strong>这里mux_poller代表总的poller中心</strong>/然后所有被注册的事件 在被触发的时候都会让 <code>mux_poller:block_has_nex</code> 方法返回一个 <code>true</code> 的结果 否则就是返回 <code>false</code> 所以这里用while循环判断是否有事件发生</p><p>那么在事件被触发后 <code>mux_poller:block_get_next()</code> 可以获取这个被触发的事件返回的数据</p><p>比如刚才的 <code>echo</code> 返回的就是 <code>终端输入的msg</code></p><p>那么根据被返回的事件的 <code>type</code> 来从 <code>cbs</code> 中取出对应的函数 然后调用函数 放入数据 就可以让这个函数来处理这一数据了！</p><h4 id="特别提示" tabindex="-1">特别提示 <a class="header-anchor" href="#特别提示" aria-label="Permalink to &quot;特别提示&quot;">​</a></h4><blockquote><p>所以我们尽量不要在一个函数的处理方法里面写上死循环或者需要堵塞很久才能完成的功能</p></blockquote><h2 id="_6-这后面将全是api的陆续补充" tabindex="-1">6.这后面将全是api的陆续补充 <a class="header-anchor" href="#_6-这后面将全是api的陆续补充" aria-label="Permalink to &quot;6.这后面将全是api的陆续补充&quot;">​</a></h2>`,46),e=[p];function t(c,r,y,E,u,i){return a(),n("div",null,e)}const m=s(o,[["render",t]]);export{q as __pageData,m as default};
