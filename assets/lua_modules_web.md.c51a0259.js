import{_ as e,c as o,o as t,Q as a}from"./chunks/framework.c009d427.js";const m=JSON.parse('{"title":"Web(HTTP) Module","description":"","frontmatter":{},"headers":[],"relativePath":"lua/modules/web.md","filePath":"lua/modules/web.md","lastUpdated":1724487756000}'),l={name:"lua/modules/web.md"},s=a('<h1 id="web-http-module" tabindex="-1">Web(HTTP) Module <a class="header-anchor" href="#web-http-module" aria-label="Permalink to &quot;Web(HTTP) Module&quot;">​</a></h1><p>This module implements HTTP requests to lua environment.</p><h2 id="access" tabindex="-1">Access <a class="header-anchor" href="#access" aria-label="Permalink to &quot;Access&quot;">​</a></h2><p>The Web module is under <code>omega</code> namespace / table.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">local http=require(&quot;omega&quot;).web</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">local http=require(&quot;omega&quot;).web</span></span></code></pre></div><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><h3 id="pseudo-definitions" tabindex="-1">Pseudo Definitions <a class="header-anchor" href="#pseudo-definitions" aria-label="Permalink to &quot;Pseudo Definitions&quot;">​</a></h3><p>These definitions are not specifically implemented, but are performed as implicit rules that are required to be conformed</p><h4 id="httprequest-table" tabindex="-1"><code>HTTPRequest</code> : <code>table</code> <a class="header-anchor" href="#httprequest-table" aria-label="Permalink to &quot;`HTTPRequest` : `table`&quot;">​</a></h4><p>This is the <code>table</code> value passed to <code>web.request</code>.</p><ul><li><code>method</code>: <code>string</code> [OPTIONAL, DEFAULT=&quot;GET&quot;], valid HTTP request method, e.g. <code>POST</code></li><li><code>body</code>: <code>string</code> [OPTIONAL], request body</li><li><code>headers</code>: <code>table</code> [OPTIONAL], all the keys SHOULD be string if defined.</li></ul><h4 id="httpresponse-table" tabindex="-1"><code>HTTPResponse</code> : <code>table</code> <a class="header-anchor" href="#httpresponse-table" aria-label="Permalink to &quot;`HTTPResponse` : `table`&quot;">​</a></h4><p>This is the <code>table</code> value that HTTP functions return.</p><ul><li><code>status</code>: <code>number</code></li><li><code>headers</code>: <code>table</code></li><li><code>body</code>: <code>string</code></li></ul><h3 id="client-http-client" tabindex="-1"><code>client</code>: HTTP Client <a class="header-anchor" href="#client-http-client" aria-label="Permalink to &quot;`client`: HTTP Client&quot;">​</a></h3><p>A client can be created by calling <code>web.new</code> or <code>client.new</code> from a client object, in either way an empty HTTP client would be created. This module, <code>web</code> itself is a <code>client</code> created by default enabling simple HTTP requests whose features like headers do not matter.</p><h4 id="client-get" tabindex="-1"><code>client.get</code> <a class="header-anchor" href="#client-get" aria-label="Permalink to &quot;`client.get`&quot;">​</a></h4><p>Argument:</p><ul><li><code>url</code>: <code>string</code> Return values:</li><li><code>response</code>: <code>HTTPResponse</code></li><li><code>error</code> [OPTIONAL]: <code>string</code></li></ul><h4 id="client-post" tabindex="-1"><code>client.post</code> <a class="header-anchor" href="#client-post" aria-label="Permalink to &quot;`client.post`&quot;">​</a></h4><p>Arguments:</p><ul><li><code>url</code>: <code>string</code></li><li><code>content_type</code>: <code>string</code></li><li><code>body</code>: <code>string</code> Return values:</li><li><code>response</code>: <code>HTTPResponse</code></li><li><code>error</code> [OPTIONAL]: <code>string</code></li></ul><h4 id="client-request" tabindex="-1"><code>client.request</code> <a class="header-anchor" href="#client-request" aria-label="Permalink to &quot;`client.request`&quot;">​</a></h4><p>Argument:</p><ul><li><code>request</code>: <code>HTTPRequest</code> Return values:</li><li><code>response</code>: <code>HTTPResponse</code></li><li><code>error</code> [OPTIONAL]: <code>string</code></li></ul><h4 id="client-headers" tabindex="-1"><code>client.headers</code> <a class="header-anchor" href="#client-headers" aria-label="Permalink to &quot;`client.headers`&quot;">​</a></h4><p>This field stores the headers that would be applied to ALL of the requests sent by the client. This field is assignable.</p><p>Usage:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">local headers={Authorization=&quot;Bearer Hello&quot;}</span></span>\n<span class="line"><span style="color:#e1e4e8;">client.headers=headers</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">local headers={Authorization=&quot;Bearer Hello&quot;}</span></span>\n<span class="line"><span style="color:#24292e;">client.headers=headers</span></span></code></pre></div>',29),c=[s];function d(i,n,r,p,h,u){return t(),o("div",null,c)}const T=e(l,[["render",d]]);export{m as __pageData,T as default};
